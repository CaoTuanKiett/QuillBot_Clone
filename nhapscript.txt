<!-- <script setup lang="ts">
import { computePosition, flip, inline, offset, shift } from '@floating-ui/dom'
import OpenAi from '@/api/openai'
import iconLoading from '@/assets/icons/loading.svg'
// import iconCheck from '@/assets/icons/check.svg'
import iconAI from '@/assets/icons/iconAI.svg'
import iconClose from '@/assets/icons/iconClose.svg'
import iconRefesh from '@/assets/icons/iconRefesh.svg'
import iconDown from '@/assets/icons/iconDown.svg'
import iconApply from '@/assets/icons/iconApply.svg'
import iconPaste from '@/assets/icons/paste.svg'
import imgLogo from '@/assets/images/logo.png'

const text = ref<string>('')
const result = ref<string>('')
const languageList = [
  'English (US)',
  'French',
  'Spanish',
  'German',
  'All',
]
const activeItem = ref<number>(1)

function handleActiveItem(id: number) {
  activeItem.value = id
}

function pasteText() {
  navigator.clipboard.readText().then((clipText) => {
    text.value = clipText
  })
}

async function parapharseText() {
  try {
    console.log('parapharseText', text.value)

    const res = await OpenAi.getParaphraseFullContent(text.value)
    console.log('parapharseText res', res)
    result.value = res
  }
  catch (error) {
    console.error(error)
  }
}

type SelectionSatuts = 'initial' | 'tooltip' | 'popover'

const resultTooltip = ref<string>('')
const status = ref<SelectionSatuts>('initial')
let selection: Selection | null = null
const mousePosition = ref<{ x: number, y: number }>({ x: 0, y: 0 })
const inputRef = ref<HTMLElement | null>(null)
const tooltipRef = ref<HTMLElement | null>(null)
const popoverRef = ref<HTMLElement | null>(null)

const rect = ref(new DOMRect())
const childRects = ref<DOMRect[]>([])

const virtualElement = ref({
  getBoundingClientRect() {
    return rect.value
  },
  getClientRects() {
    return [childRects.value[childRects.value.length - 1]]
  },
})

async function attachTooltip() {
  if (tooltipRef.value) {
    const { x, y, strategy } = await computePosition(virtualElement.value, tooltipRef.value, {
      strategy: 'fixed',
      placement: 'right-end',
      middleware: [
        flip(),
        shift(),
        offset(4),
        inline(),
      ],
    })

    tooltipRef.value.style.position = strategy
    tooltipRef.value.style.left = `${x}px`
    tooltipRef.value.style.top = `${y}px`
  }
}

async function attachPopover() {
  if (popoverRef.value) {
    const { x, y, strategy } = await computePosition(virtualElement.value, popoverRef.value, {
      strategy: 'fixed',
      placement: 'top',
      middleware: [
        flip(),
        shift(),
        offset(4),
        inline(),
      ],
    })

    popoverRef.value.style.position = strategy
    popoverRef.value.style.left = `${x}px`
    popoverRef.value.style.top = `${y}px`
  }
}

async function parapharse(text: string) {
  try {
    const res = await OpenAi.getParaphraseFullContent(text)
    console.log('parapharse', res)

    resultTooltip.value = res
  }
  catch (error) {
    console.error(error)
  }
}

onMounted(() => {
  document.addEventListener('selectionchange', () => {
    selection = window.getSelection()
    console.log('selectionchange', selection)

    if (!selection?.rangeCount || selection?.toString().length === 0)
      return

    const range = selection.getRangeAt(0)

    rect.value = range.getBoundingClientRect()
    childRects.value = Array.from(range.getClientRects())

    // boundingRect.value = {
    //   x: rect.value.right,
    //   y: rect.value.top,
    // }
  })

  document.addEventListener('mousemove', (e) => {
    mousePosition.value = {
      x: e.clientX,
      y: e.clientY,
    }
  })
})

function handleMouseUp() {
  const selection = window.getSelection()

  if (!selection || selection?.toString().length === 0)
    return

  status.value = 'tooltip'

  nextTick(attachTooltip)
  // attachTooltip()
  console.log('handleMouseUp', selection?.toString())
}

function handleReplace() {
  if (!selection?.rangeCount)
    return

  const range = selection?.getRangeAt(0)

  range?.deleteContents()
  range?.insertNode(document.createTextNode(resultTooltip.value))
  status.value = 'initial'
  resultTooltip.value = ''
}

function reselectElement() {
  if (!selection?.anchorNode || !selection?.focusNode || status.value === 'initial') {
    selection?.removeAllRanges()
    return
  }

  const range = document.createRange()

  range.setStart(selection?.anchorNode, selection?.anchorOffset || 0)
  range.setEnd(selection?.focusNode, selection?.focusOffset || 0)

  selection.removeAllRanges()
  selection.addRange(range)
}

function handleBlur() {
  if (inputRef.value && isisMouseInElement(inputRef.value) || tooltipRef.value && isisMouseInElement(tooltipRef.value) || popoverRef.value && isisMouseInElement(popoverRef.value) || status.value === 'popover')
    reselectElement()
}

function handleOpenPopover() {
  if (!selection || selection?.toString().length === 0)
    return
  status.value = 'popover'

  nextTick(attachPopover)

  parapharse(selection?.toString())
}

function isisMouseInElement(element: HTMLElement) {
  const elemenRect = element.getBoundingClientRect()
  return (
    mousePosition.value.x >= elemenRect.left
    && mousePosition.value.x <= elemenRect.right
    && mousePosition.value.y >= elemenRect.top
    && mousePosition.value.y <= elemenRect.bottom
  )
}

function handleClosePopover() {
  status.value = 'initial'
  resultTooltip.value = ''
}

function handleInput(event: any) {
  text.value = event.target.textContent
}

function handleInputResult(event: any) {
  result.value = event.target.textContent
}
</script> -->